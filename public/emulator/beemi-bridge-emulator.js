/*
 * ⚠️  AUTO-GENERATED FILE - DO NOT EDIT ⚠️
 * 
 * This file was automatically generated by 'beemi test' command
 * Generated: 2025-08-21T20:50:16.633Z
 * Source: Beemi Server SDK Manifest
 * 
 * Manual changes to this file will be lost when running 'beemi test'
 * To customize emulator behavior, modify your project's manifest.json instead
 */

/**
 * Beemi Modular SDK Bridge Emulator v2.0
 * Development emulator that loads the modular SDK and provides testing utilities
 * 
 * === BEEMI LIBRARY ACCESS ===
 * After loading, access the SDK via:
 * 
 * === PUBLIC UTILITIES (always available) ===
 * window.beemi.isReady()           - Check if SDK is ready
 * 
 * === CORE MODULE (internal functions) ===
 * window.beemi.core.on(event, callback)    - Internal event system
 * window.beemi.core.off(event, callback)   - Remove event listener
 * window.beemi.core.emit(event, data)      - Emit internal event
 * window.beemi.core.log(level, msg)        - Logging utility
 * window.beemi.core.setLogLevel(level)     - Set log level
 * window.beemi.core.getBridgeInfo()        - Get bridge information
 * 
 * === STREAMS MODULE (if enabled) ===
 * window.beemi.streams.onChat(callback)       - Listen for chat events
 *   Callback receives: { user: {username, displayName, id, platform, imageUrl?}, message: string, messageId: string, platform: string, timestamp: number }
 * window.beemi.streams.onGift(callback)       - Listen for gift events  
 *   Callback receives: { user: {username, displayName, id, platform, imageUrl?}, gift: {name, emoji, value, count}, platform: string, timestamp: number }
 * window.beemi.streams.onLike(callback)       - Listen for like events
 *   Callback receives: { user: {username, displayName, id, platform, imageUrl?}, count: number, platform: string, timestamp: number }
 * window.beemi.streams.onFollow(callback)     - Listen for follow events
 *   Callback receives: { user: {username, displayName, id, platform, imageUrl?}, followerCount: number, platform: string, timestamp: number }
 * window.beemi.streams.onViewerJoin(callback) - Listen for viewer events
 *   Callback receives: { user: {username, displayName, id, platform, imageUrl?}, viewerCount: number, platform: string, timestamp: number }
 * window.beemi.streams.tiktok.connect(user)   - Connect to TikTok
 * window.beemi.streams.youtube.connect(id)    - Connect to YouTube
 * window.beemi.streams.twitch.connect(user)   - Connect to Twitch
 * window.beemi.streams.getConnections()       - Get active connections
 * 
 * === MULTIPLAYER MODULE (if enabled) ===
 * window.beemi.multiplayer.room.host(gameId)     - Host a room
 * window.beemi.multiplayer.room.join(code)       - Join a room
 * window.beemi.multiplayer.room.leave()          - Leave room
 * window.beemi.multiplayer.crdt.get(key)         - Get shared state
 * window.beemi.multiplayer.crdt.set(key, value)  - Set shared state
 * window.beemi.multiplayer.mutex.acquire(key)    - Acquire lock
 * window.beemi.multiplayer.mutex.release(key)    - Release lock
 * window.beemi.multiplayer.isLeader()            - Check if leader
 * window.beemi.multiplayer.on(event, callback)   - Listen for events
 *   'player-joined': { playerId: string, playerName: string, playerCount: number, players: Array }
 *   'player-left': { playerId: string, playerName: string, playerCount: number, players: Array }
 *   'room-ready': { roomId: string, joinCode: string, playerCount: number }
 *   'leader-changed': { newLeaderId: string, oldLeaderId: string }
 *   'crdt-update': { key: string, value: any, playerId: string }
 * 
 * === USER MODULE (if enabled) ===
 * const user = window.beemi.user.getUser()         - Get current user object (NEW MODULAR APPROACH)
 * user?.id                                         - Current user ID (string | null)
 * user?.username                                   - Current username (string | null)
 * user?.display_name                               - Current display name (string | null)
 * user?.image_url                                  - Current profile image URL (string | null)
 * 

 * 
 * === DEVELOPMENT UTILITIES (always available) ===
 * window.beemiDev.help()                         - Show help
 * window.beemiDev.core.checkSDK()                - Check SDK status
 * window.beemiDev.user.setSampleUser({id, username, display_name, image_url}) - Set sample user
 * window.beemiDev.user.signOut()                 - Clear user data
 * window.beemiDev.streams.simulateChat(user, msg, platform) - Simulate chat
 * window.beemiDev.streams.simulateLike(platform) - Simulate like
 * window.beemiDev.streams.simulateGift(platform) - Simulate gift
 * window.beemiDev.streams.testAllPlatforms()     - Test all platforms
 * window.beemiDev.multiplayer.simulatePlayerJoin(id, name) - Simulate join
 * window.beemiDev.multiplayer.simulateRoomReady() - Simulate room ready
 * window.beemiDev.devtools.getSDKInfo()          - Get SDK information
 * window.beemiDev.devtools.stressTest()          - Run stress test
 * window.beemiDev.devtools.generateRandomProfilePic() - Random avatar
 * 
 * === RAW MODULE REGISTRY ===
 * window.BeemiModules                            - Direct module access
 * 
 * Quick tests:
 * - beemi.streams?.onChat((data) => console.log(`${data.user.username}: ${data.message}`))
 * - beemi.multiplayer?.isLeader()
 * - beemi.user?.getUser()?.username // Check current user (NEW MODULAR APPROACH)
 * - beemiDev.streams.simulateChat('Alice', 'Hello!')
 * - beemiDev.help()
 */

(function(window) {
    'use strict';
    
    console.log('🚀 Beemi Bridge Emulator v2.0 loading...');
    
    // Cached manifest to avoid multiple fetches
    let _gameManifest = null;
    
    // Load the game manifest (cached)
    async function loadGameManifest() {
        if (_gameManifest) {
            return _gameManifest;
        }
        
        try {
            const response = await fetch('./manifest.json');
            if (!response.ok) {
                throw new Error(`Failed to load manifest: ${response.status}`);
            }
            _gameManifest = await response.json();
            console.log('📄 Game manifest loaded:', {
                name: _gameManifest.name,
                version: _gameManifest.version,
                sdkVersion: _gameManifest.beemi?.sdkVersion
            });
            return _gameManifest;
            
        } catch (error) {
            console.error('❌ Failed to load game manifest:', error);
            throw error;
        }
    }

    // Dynamic SDK URL by fetching SDK manifest and looking up the version
    async function getSDKUrl() {
        try {
            const gameManifest = await loadGameManifest();
            
            // Extract SDK version from game manifest
            const sdkVersion = gameManifest.beemi?.sdkVersion || '2.1.0';
            console.log(`📋 Required SDK version from game manifest: ${sdkVersion}`);
            
            // Fetch the main SDK manifest
            const sdkManifestUrl = `https://beemi-server-staging-s7ne.onrender.com/sdk-manifest.json`;
            console.log(`🔍 Fetching SDK manifest: ${sdkManifestUrl}`);
            
            const sdkManifestResponse = await fetch(sdkManifestUrl);
            if (!sdkManifestResponse.ok) {
                throw new Error(`Failed to fetch SDK manifest: ${sdkManifestResponse.status}`);
            }
            
            const sdkManifest = await sdkManifestResponse.json();
            console.log(`📄 SDK manifest loaded:`, {
                version: sdkManifest.version,
                lastUpdated: sdkManifest.lastUpdated,
                availableSDKs: Object.keys(sdkManifest.sdks),
                recommended: sdkManifest.recommended
            });
            
            // Look up the specific SDK version
            const sdkKey = `beemi-sdk-${sdkVersion}`;
            const sdkInfo = sdkManifest.sdks[sdkKey];
            
            if (!sdkInfo) {
                throw new Error(`SDK version ${sdkVersion} not found in manifest. Available: ${Object.keys(sdkManifest.sdks).join(', ')}`);
            }
            
            // Construct full URL (server base + relative URL)
            const baseUrl = 'https://beemi-server-staging-s7ne.onrender.com';
            const sdkUrl = baseUrl + sdkInfo.url;
            
            console.log(`🔗 SDK URL from manifest (v${sdkVersion}):`, {
                url: sdkUrl,
                size: sdkInfo.size,
                modules: sdkInfo.modules,
                description: sdkInfo.description
            });
            
            return sdkUrl;
            
        } catch (error) {
            console.error('❌ Failed to get SDK URL from SDK manifest, using fallback:', error);
            // Fallback to constructed URL
            const gameManifest = await loadGameManifest().catch(() => null);
            const sdkVersion = gameManifest?.beemi?.sdkVersion || '2.1.0';
            const fallbackUrl = `https://beemi-server-staging-s7ne.onrender.com/sdk/beemi-sdk-${sdkVersion}.js`;
            console.log(`🔄 Using fallback URL: ${fallbackUrl}`);
            return fallbackUrl;
        }
    }

    // Load and modify the actual game manifest based on user injection setting
    async function getGameManifest() {
        try {
            const gameManifest = await loadGameManifest();
            
            // Extract just the beemi configuration
            let beemiConfig = gameManifest.beemi || {};
            
            // Check if user injection is enabled from parent window
            const userInjectionEnabled = window.parent?.beemiUserInjectionEnabled !== false;
            
            // IMPORTANT: Always keep the user module in the config because:
            // 1. The game needs it to handle user updates when someone signs in later
            // 2. userInjectionEnabled only controls whether to inject a user at startup
            // 3. The user module should be available even if no user is initially present
            
            // The user module must always be included for proper event handling
            console.log('🔧 User module kept in manifest for event handling (userInjectionEnabled:', userInjectionEnabled, ')');
            
            console.log('🔧 Game Manifest (Beemi config):', { 
                ...beemiConfig, 
                userInjectionEnabled,
                userModuleIncluded: !!beemiConfig.user 
            });
            
            return beemiConfig;
            
        } catch (error) {
            console.error('❌ Failed to load game manifest, falling back to basic config:', error);
            
            // Fallback configuration
            const userInjectionEnabled = window.parent?.beemiUserInjectionEnabled !== false;
            const fallback = {
                core: { required: true },
                streams: { required: true }
            };
            
            if (userInjectionEnabled) {
                fallback.user = { required: true };
            }
            
            return fallback;
        }
    }
    
    // Load the modular SDK into the iframe
    async function loadModularSDK() {
        console.log('📦 Loading Modular SDK into iframe...');
        
        try {
            const url = await getSDKUrl();
            console.log(`🔗 SDK URL: ${url}`);
            
            const response = await fetch(url);
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }
            
            const sdkCode = await response.text();
            
            // Find the iframe element
            const iframe = document.querySelector('.webview-iframe');
            if (!iframe || !iframe.contentWindow) {
                throw new Error('Game iframe not found or not accessible');
            }
            
            console.log('🎯 Injecting SDK into iframe...');
            
            // Create a script element in the iframe
            const script = iframe.contentDocument.createElement('script');
            script.textContent = sdkCode;
            iframe.contentDocument.head.appendChild(script);
            
            // Wait a moment for the SDK to load
            await new Promise(resolve => setTimeout(resolve, 100));
            
            // Initialize SDK in the iframe context
            if (iframe.contentWindow.initBeemiModularSDK) {
                const beemiConfig = await getGameManifest();
                iframe.contentWindow.initBeemiModularSDK(beemiConfig);
                
                // Verify user module was created
                setTimeout(() => {
                    if (iframe.contentWindow.BeemiModules?.user) {
                        console.log('✅ User module initialized successfully');
                    } else {
                        console.warn('⚠️ User module not found after initialization');
                    }
                }, 200);
                
                console.log(`✅ Modular SDK loaded successfully in iframe with game manifest`);
                return true;
            } else {
                throw new Error('SDK initialization function not found in iframe');
            }
            
        } catch (error) {
            console.error(`❌ Failed to load SDK into iframe:`, error.message);
            throw new Error(`Failed to load Modular SDK: ${error.message}`);
        }
    }
    
    /**
     * Modular Development Testing Utilities
     */
    const BeemiDev = {
        version: '2.0.0',
        
        // Core utilities
        core: {
            checkSDK: function() {
                const iframe = document.querySelector('.webview-iframe');
                if (!iframe || !iframe.contentWindow || !iframe.contentWindow.beemi) {
                    throw new Error('Modular SDK not loaded in iframe context.');
                }
                return iframe.contentWindow.beemi;
            },
            
            getIframe: function() {
                const iframe = document.querySelector('.webview-iframe');
                if (!iframe || !iframe.contentWindow) {
                    throw new Error('Game iframe not found or not accessible');
                }
                return iframe;
            }
        },
        
        // User simulation utilities
        user: {
            setSampleUser: function(userData) {
                const beemi = BeemiDev.core.checkSDK();
                
                if (!beemi || !beemi.user) {
                    console.warn('⚠️ User module not loaded - user injection is disabled');
                    return;
                }
                
                // Check if user injection is enabled
                const userInjectionEnabled = window.beemiUserInjectionEnabled !== false;
                
                if (!userInjectionEnabled) {
                    console.log('👤 User injection is disabled');
                    return;
                }
                
                const sampleUser = userData || {
                    id: 'user123',
                    username: 'testuser',
                    display_name: 'Test User',
                    image_url: 'https://api.dicebear.com/7.x/avataaars/svg?seed=testuser'
                };
                
                // For modular SDK, we need to set the user data through the user module
                if (typeof beemi.user.setUser === 'function') {
                    beemi.user.setUser(sampleUser);
                } else {
                    // Fallback to core event emission
                    beemi.core.emit('user-data-received', sampleUser);
                }
                
                console.log('👤 Sample user updated:', sampleUser);
            },
            
            signOut: function() {
                const beemi = BeemiDev.core.checkSDK();
                
                if (!beemi || !beemi.user) {
                    console.log('👤 User module not loaded - no user data to clear');
                    return;
                }
                
                // Clear user data using modular approach
                const nullUser = {
                    id: null,
                    username: null,
                    display_name: null,
                    image_url: null
                };
                
                if (typeof beemi.user.setUser === 'function') {
                    beemi.user.setUser(nullUser);
                } else {
                    // Fallback to core event emission
                    beemi.core.emit('user-data-received', nullUser);
                }
                
                beemi.core.emit('user-signed-out');
                console.log('👤 User signed out - all user data cleared');
            }
        },
        
        // Streaming module simulation
        streams: {
            simulateChat: function(username, message, platform = 'tiktok') {
                const beemi = BeemiDev.core.checkSDK();
                
                // Match exact React Native format
                const chatEvent = {
                    type: 'stream-chat',
                    data: {
                        user: {
                            id: `${platform}_${username || 'TestUser'}`,
                            username: username || 'TestUser',
                            displayName: username || 'TestUser',
                            platform: platform,
                            imageUrl: `https://api.dicebear.com/7.x/avataaars/svg?seed=${username || 'TestUser'}`
                        },
                        message: message || 'Test message',
                        messageId: `msg_${Date.now()}`,
                        platform: platform,
                        timestamp: Date.now()
                    }
                };
                
                console.log('📺 [Streams] Simulating chat event:', chatEvent);
                console.log(`💬 ${username}: ${message}`);
                
                // Emit through beemi streams if available
                if (beemi.streams && typeof beemi.streams.emit === 'function') {
                    beemi.streams.emit('chat', chatEvent);
                } else if (beemi.core && typeof beemi.core.emit === 'function') {
                    // Fallback to core event system
                    beemi.core.emit('stream-chat', chatEvent);
                } else {
                    console.warn('⚠️ No event system found - chat simulation may not work');
                }
                
                return chatEvent;
            },
            
            simulateEvent: function(platform, eventType, data = {}) {
                BeemiDev.core.checkSDK();
                
                const streamEvent = {
                    streamId: 'dev-stream-123',
                    platform: platform || 'tiktok',
                    type: `stream-${eventType}`,
                    data: {
                        user: {
                            id: `${platform || 'tiktok'}_${data.user || 'TestStreamer'}`,
                            username: data.user || 'TestStreamer',
                            displayName: data.user || 'TestStreamer',
                            platform: platform || 'tiktok',
                            imageUrl: BeemiDev.devtools.generateRandomProfilePic()
                        },
                        timestamp: Date.now(),
                        platform: platform || 'tiktok',
                        ...data
                    }
                };
                
                console.log(`📺 BeemiDev.streams: Simulating ${platform} ${eventType}`, streamEvent);
                window.beemi.core.emit(`stream-${eventType}`, streamEvent);
            },
            
            simulateLike: function(platform = 'tiktok') {
                this.simulateEvent(platform, 'like', {
                    count: Math.floor(Math.random() * 100) + 1
                });
            },
            
            simulateFollow: function(platform = 'tiktok') {
                this.simulateEvent(platform, 'follow', {
                    followerCount: Math.floor(Math.random() * 1000) + 100
                });
            },
            
            simulateGift: function(platform = 'tiktok', giftName = 'Rose', emoji = '🌹') {
                this.simulateEvent(platform, 'gift', {
                    giftName,
                    emoji,
                    value: Math.floor(Math.random() * 100) + 10,
                    count: Math.floor(Math.random() * 5) + 1
                });
            },
            
            simulateShare: function(platform = 'tiktok') {
                this.simulateEvent(platform, 'share', {
                    shareCount: Math.floor(Math.random() * 50) + 1
                });
            },
            
            simulateViewerJoin: function(username = 'TestViewer', platform = 'tiktok') {
                BeemiDev.core.checkSDK();
                
                const viewerEvent = {
                    type: 'stream-viewer-join',
                    streamId: 'dev-stream-123',
                    platform: platform,
                    data: {
                        user: username,
                        timestamp: Date.now(),
                        viewerCount: Math.floor(Math.random() * 1000) + 50,
                        platform: platform
                    }
                };
                
                console.log('👥 BeemiDev.streams: Simulating viewer join', viewerEvent);
                window.beemi.core.emit('stream-viewer-join', viewerEvent);
            },
            
            testAllPlatforms: function() {
                console.log('🧪 BeemiDev.streams: Testing all streaming platforms...');
                
                // TikTok events
                setTimeout(() => this.simulateChat('TikTokUser', 'Hello from TikTok! 🎵', 'tiktok'), 1000);
                setTimeout(() => this.simulateLike('tiktok'), 2000);
                setTimeout(() => this.simulateGift('tiktok', 'Heart', '❤️'), 3000);
                
                // YouTube events
                setTimeout(() => this.simulateChat('YouTuber', 'YouTube Live is awesome! 📹', 'youtube'), 4000);
                setTimeout(() => this.simulateFollow('youtube'), 5000);
                setTimeout(() => this.simulateGift('youtube', 'Super Chat', '💬'), 6000);
                
                // Twitch events
                setTimeout(() => this.simulateChat('TwitchGamer', 'Poggers! 🎮', 'twitch'), 7000);
                setTimeout(() => this.simulateGift('twitch', 'Bits', '💎'), 8000);
                setTimeout(() => this.simulateShare('twitch'), 9000);
            }
        },
        
        // Multiplayer module simulation  
        multiplayer: {
            simulatePlayerJoin: function(playerId = 'test-player', playerName = 'TestPlayer') {
                BeemiDev.core.checkSDK();
                
                const playerEvent = {
                    type: 'player-joined',
                    roomId: 'dev-room-123',
                    data: {
                        playerId,
                        playerName,
                        timestamp: Date.now(),
                        isLeader: false,
                        roomId: 'dev-room-123'
                    }
                };
                
                console.log('🎮 BeemiDev.multiplayer: Simulating player join', playerEvent);
                window.beemi.core.emit('player-joined', playerEvent);
            },
            
            simulatePlayerLeave: function(playerId = 'test-player', playerName = 'TestPlayer') {
                BeemiDev.core.checkSDK();
                
                const playerEvent = {
                    type: 'player-left', 
                    roomId: 'dev-room-123',
                    data: {
                        playerId,
                        playerName,
                        timestamp: Date.now(),
                        roomId: 'dev-room-123'
                    }
                };
                
                console.log('🎮 BeemiDev.multiplayer: Simulating player leave', playerEvent);
                window.beemi.core.emit('player-left', playerEvent);
            },
            
            simulateRoomReady: function(roomId = 'dev-room-123') {
                BeemiDev.core.checkSDK();
                
                const roomEvent = {
                    type: 'room-ready',
                    data: {
                        roomId,
                        playerCount: Math.floor(Math.random() * 6) + 2,
                        maxPlayers: 6,
                        timestamp: Date.now()
                    }
                };
                
                console.log('🏠 BeemiDev.multiplayer: Simulating room ready', roomEvent);
                window.beemi.core.emit('room-ready', roomEvent);
            }
        },
        
        // DevTools module simulation
        devtools: {
            generateRandomProfilePic: function() {
                const seed = Math.random().toString(36).substring(7);
                return `https://randomuser.me/api/portraits/${Math.random() > 0.5 ? 'men' : 'women'}/${Math.floor(Math.random() * 99) + 1}.jpg`;
            },
            
            getSDKInfo: function() {
                if (!window.beemi || !window.BeemiModules) {
                    throw new Error('Modular SDK not loaded or initialized');
                }
                
                return {
                    type: 'modular',
                    version: window.beemi.version,
                    modules: Object.keys(window.BeemiModules),
                    loadedFromGameManifest: true,
                    userInjectionEnabled: window.parent?.beemiUserInjectionEnabled !== false,
                    coreReady: window.beemi.isReady()
                };
            },
            
            stressTest: function() {
                console.log('🧪 BeemiDev.devtools: Starting modular SDK stress test...');
                
                // Mixed chat and stream events
                const usernames = ['Alice', 'Bob', 'Charlie', 'Dana', 'Eve', 'Frank', 'Grace'];
                const messages = [
                    'Hello everyone!',
                    'This modular SDK is amazing!',
                    'Love the new features!',
                    'How does P2P work?',
                    'Great streaming integration!',
                    'The emulator is so cool!',
                    'Testing multiple platforms!'
                ];
                
                for (let i = 0; i < 10; i++) {
                    setTimeout(() => {
                        const username = usernames[Math.floor(Math.random() * usernames.length)];
                        const message = messages[Math.floor(Math.random() * messages.length)];
                        BeemiDev.streams.simulateChat(username, message);
                    }, i * 800);
                }
                
                // Social events
                setTimeout(() => BeemiDev.streams.simulateLike(), 2000);
                setTimeout(() => BeemiDev.streams.simulateFollow(), 4000);
                setTimeout(() => BeemiDev.streams.simulateGift('tiktok', 'Galaxy', '🌌'), 6000);
                setTimeout(() => BeemiDev.multiplayer.simulatePlayerJoin(), 8000);
                
                console.log('🧪 Stress test running for 10 seconds...');
            }
        },
        
        // Show available commands (modular structure)
        help: function() {
            console.log(`
🛠️ Beemi Development Tools v${this.version} - Modular SDK

📦 Modular Structure:
  beemiDev.core.*         - Core utilities  
  beemiDev.streams.*      - Streaming simulation
  beemiDev.multiplayer.*  - P2P multiplayer simulation
  beemiDev.devtools.*     - Development utilities

🔧 Core Module:
  beemiDev.core.checkSDK()                   - Verify SDK is loaded

📺 Streams Module:
  beemiDev.streams.simulateChat(user, msg, platform)    - Send chat message
  beemiDev.streams.simulateLike(platform)               - Simulate like event
  beemiDev.streams.simulateFollow(platform)             - Simulate follow event  
  beemiDev.streams.simulateGift(platform, name, emoji)  - Simulate gift event
  beemiDev.streams.simulateShare(platform)              - Simulate share event
  beemiDev.streams.simulateViewerJoin(user, platform)   - Simulate viewer join
  beemiDev.streams.testAllPlatforms()                   - Test all platforms

🎮 Multiplayer Module:
  beemiDev.multiplayer.simulatePlayerJoin(id, name)     - Simulate player join
  beemiDev.multiplayer.simulatePlayerLeave(id, name)    - Simulate player leave
  beemiDev.multiplayer.simulateRoomReady(roomId)        - Simulate room ready

🧪 DevTools Module:
  beemiDev.devtools.generateRandomProfilePic()   - Generate random avatar
  beemiDev.devtools.getSDKInfo()                  - Show SDK information
  beemiDev.devtools.stressTest()                  - Comprehensive stress test

📚 Modular SDK Usage Examples:
  // Public utilities
  beemi.isReady()
  
  // Core internal functions (when needed)
  beemi.core.log('info', 'Debug message')
  beemi.core.setLogLevel('debug')
  
  // Streaming module - callbacks receive data directly (not wrapped in event.data)
  beemi.streams.onChat((data) => {
    console.log(\`\${data.user.username}: \${data.message}\`);
    // data = { user: {username, displayName, id, platform, imageUrl?}, message: string, messageId: string, platform: string, timestamp: number }
  });
  
  beemi.streams.onGift((data) => {
    console.log(\`\${data.user.username} sent \${data.gift.name} x\${data.gift.count}\`);
    // data = { user: {username, displayName, id, platform, imageUrl?}, gift: {name, emoji, value, count}, platform: string, timestamp: number }
  });
  
  beemi.streams.onLike((data) => {
    console.log(\`\${data.user.username} liked \${data.count} times\`);
    // data = { user: {username, displayName, id, platform, imageUrl?}, count: number, platform: string, timestamp: number }
  });
  
  beemi.streams.tiktok.connect(username)
  beemi.streams.youtube.connect(channelId)
  
  // Multiplayer P2P module - callbacks also receive data directly
  beemi.multiplayer.room.join(code)
  beemi.multiplayer.crdt.set('key', value)
  beemi.multiplayer.isLeader()
  beemi.multiplayer.on('player-joined', (data) => {
    console.log(\`\${data.playerName} joined! Players: \${data.playerCount}\`);
    // data = { playerId: string, playerName: string, playerCount: number, players: Array }
  });
  


🚀 Quick Start:
  beemiDev.streams.simulateChat('Alice', 'Hello modular world!')
  beemiDev.streams.simulateGift('tiktok', 'Galaxy', '🌌')
  beemiDev.streams.testAllPlatforms()
  beemiDev.devtools.stressTest()

⚡ Fail-Fast Design:
  All methods throw errors if SDK not loaded - no silent fallbacks!
            `);
        },
        
        // Convenience methods for backward compatibility (deprecated)
        simulateChat: function(username, message) {
            console.warn('⚠️ beemiDev.simulateChat() is deprecated. Use beemiDev.streams.simulateChat()');
            return this.streams.simulateChat(username, message);
        },
        
        simulateLike: function(platform) {
            console.warn('⚠️ beemiDev.simulateLike() is deprecated. Use beemiDev.streams.simulateLike()');
            return this.streams.simulateLike(platform);
        },
        
        simulateGift: function(platform, name, emoji) {
            console.warn('⚠️ beemiDev.simulateGift() is deprecated. Use beemiDev.streams.simulateGift()');
            return this.streams.simulateGift(platform, name, emoji);
        },
        
        testAllPlatforms: function() {
            console.warn('⚠️ beemiDev.testAllPlatforms() is deprecated. Use beemiDev.streams.testAllPlatforms()');
            return this.streams.testAllPlatforms();
        },
        
        stressTest: function() {
            console.warn('⚠️ beemiDev.stressTest() is deprecated. Use beemiDev.devtools.stressTest()');
            return this.devtools.stressTest();
        },
        
        getSDKInfo: function() {
            console.warn('⚠️ beemiDev.getSDKInfo() is deprecated. Use beemiDev.devtools.getSDKInfo()');
            return this.devtools.getSDKInfo();
        }
    };
    
    // Mock ReactNativeWebView for app bridge simulation
    function setupAppBridgeSimulation() {
        if (!window.ReactNativeWebView) {
            window.ReactNativeWebView = {
                postMessage: function(messageString) {
                    try {
                        const message = JSON.parse(messageString);
                        
                        if (message.type === 'beemi-app-bridge') {
                            console.log('🌉 [App-Bridge Emulator] Received bridge message:', message);
                            
                            // Show alert for bridge method calls
                            const { action, payload, fireAndForget } = message;
                            const alertMessage = `🌉 App Bridge Call\n\nAction: ${action}\nPayload: ${JSON.stringify(payload, null, 2)}\nType: ${fireAndForget ? 'Fire & Forget' : 'Request-Response'}`;
                            
                            // Show alert (can be disabled by setting window.beemiShowBridgeAlerts = false)
                            if (window.parent?.beemiShowBridgeAlerts !== false) {
                                alert(alertMessage);
                            }
                            
                            // Simulate response for request-response actions
                            if (!fireAndForget) {
                                setTimeout(() => {
                                    const response = {
                                        type: 'beemi-app-bridge-response',
                                        requestId: message.requestId,
                                        success: true,
                                        data: getSimulatedResponse(action, payload)
                                    };
                                    
                                    console.log('🌉 [App-Bridge Emulator] Sending simulated response:', response);
                                    
                                    // Post response back to the SDK
                                    window.postMessage(response, '*');
                                }, 500); // Simulate network delay
                            }
                        }
                    } catch (error) {
                        console.error('🌉 [App-Bridge Emulator] Error processing message:', error);
                    }
                }
            };
            
            console.log('🌉 [App-Bridge Emulator] ReactNativeWebView mock initialized');
            console.log('💡 Set window.beemiShowBridgeAlerts = false to disable alerts');
        }
    }
    
    // Generate simulated responses for different app bridge actions
    function getSimulatedResponse(action, payload) {
        switch (action) {
            case 'auth.promptSignIn':
                return {
                    success: true,
                    user: {
                        id: 'sim-user-123',
                        username: 'simulateduser',
                        displayName: 'Simulated User',
                        avatar: 'https://api.dicebear.com/7.x/avataaars/svg?seed=simulated'
                    },
                    message: 'Simulated sign-in successful'
                };
                
            case 'navigation.navigateTo':
                return {
                    success: true,
                    navigatedTo: payload.screen,
                    params: payload.params
                };
                
            case 'navigation.openUrl':
                return {
                    success: true,
                    openedUrl: payload.url
                };
                
            case 'device.getInfo':
                return {
                    platform: 'iOS',
                    version: '17.0',
                    model: 'iPhone 15 Pro',
                    appVersion: '1.0.0',
                    isSimulator: true
                };
                
            case 'device.copyToClipboard':
                return {
                    success: true,
                    copiedText: payload.text
                };
                
            case 'app.getInfo':
                return {
                    name: 'Beemi Dev App',
                    version: '1.0.0',
                    build: '123'
                };
                
            case 'util.share':
                return {
                    success: true,
                    platform: 'system',
                    shared: payload
                };
                
            default:
                return {
                    success: true,
                    action: action,
                    message: 'Simulated response for unknown action'
                };
        }
    }

    // Initialize the emulator
    async function initialize() {
        try {
            // Set up app bridge simulation before loading SDK
            setupAppBridgeSimulation();
            
            await loadModularSDK();
            
            // Make development tools available in TOP CONTEXT ONLY
            window.beemiDev = BeemiDev;
            
            console.log('✅ Beemi Bridge Emulator v2.0 initialized');
            console.log('🛠️ Development tools: window.beemiDev (top context)');
            console.log('📱 Game SDK: window.beemi (iframe context)');
            console.log('💡 Type: beemiDev.help() for available commands');
            
            // Get iframe for user injection
            const iframe = document.querySelector('.webview-iframe');
            if (iframe && iframe.contentWindow && iframe.contentWindow.beemi) {
                // Check if user injection is enabled
                const userInjectionEnabled = window.beemiUserInjectionEnabled !== false;
                
                if (userInjectionEnabled && iframe.contentWindow.beemi.user) {
                    const sampleUserData = {
                        id: 'user0',
                        username: 'devgamer',
                        display_name: 'Dev Gamer',
                        image_url: 'https://api.dicebear.com/7.x/avataaars/svg?seed=devgamer'
                    };
                    
                    // Set user data in iframe context
                    if (typeof iframe.contentWindow.beemi.user.setUser === 'function') {
                        iframe.contentWindow.beemi.user.setUser(sampleUserData);
                    } else {
                        // Fallback to core event emission
                        iframe.contentWindow.beemi.core.emit('user-data-received', sampleUserData);
                    }
                    
                    console.log('👤 Sample user loaded in iframe context:', sampleUserData);
                } else {
                    console.log('👤 User injection disabled');
                }
            } else {
                console.log('👤 User module not loaded in iframe');
            }
            
        } catch (error) {
            console.error('❌ Failed to initialize bridge emulator:', error);
            throw error;
        }
    }
    
    // Start initialization
    initialize();
    
})(window); 